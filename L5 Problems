#Q1
def iterPower(base, exp):
    '''
    base: int or float.
    exp: int >= 0
 
    returns: int or float, base^exp
    '''
    # Your code here
    result = base
    if exp == 0:
        return float(1)
    else:
        for i in range(exp-1):
            result = result * base
    return result

#q2
def recurPower(base, exp):
    '''
    base: int or float.
    exp: int >= 0
 
    returns: int or float, base^exp
    '''
    # Your code here
    if exp==0:
        return float(1)
    else:
        exp -=1
        return base*recurPower(base,exp)
        
#q3
def recurPowerNew(base, exp):
    '''
    base: int or float.
    exp: int >= 0

    returns: int or float; base^exp
    '''
    # Your code here
    if exp%2 ==0 and exp > 0 :
        exp = exp /2
        return recurPowerNew(base*base,exp)
    elif exp%2 != 0 and exp >0:
        exp = exp-1
        return base*recurPowerNew(base,exp)
    elif exp ==0:
        return float(1)
        
#q4
def gcdIter(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
    # Your code here
    if a>b:
        m = a
        l = b
    else:
        m = b
        l = a
    for i in range(l):
        if m % (l - i) ==0 and l %(l-i) == 0:
            return l - i
#q5
def gcdRecur(a, b):
    '''
    a, b: positive integers
    
    returns: a positive integer, the greatest common divisor of a & b.
    '''
    # Your code here
    if b ==0:
        return a
    else:
        return gcdRecur(b,a%b)
#q6
def lenIter(aStr):
    '''
    aStr: a string
    
    returns: int, the length of aStr
    '''
    # Your code here
    counter = 0
    for i in aStr:
        counter +=1
    return counter
#q7
def lenRecur(aStr):
    '''
    aStr: a string
    
    returns: int, the length of aStr
    '''
    # Your code here
    if aStr =="":
        return 0
    else:
        aStr = aStr[1:]
        return 1+lenRecur(aStr)
#q8
def isIn(char, aStr):
    '''
    char: a single character
    aStr: an alphabetized string
    
    returns: True if char is in aStr; False otherwise
    '''
    # Your code here
    if (aStr=="") or (ord(char) < ord(aStr[0])) or (ord(char)>ord(aStr[len(aStr)-1])):
        return False
    elif ord(char) < ord(aStr[len(aStr)/2]):
        return isIn(char, aStr[:len(aStr)/2])
    elif ord(char) > ord(aStr[len(aStr)/2]): 
        return isIn(char, aStr[len(aStr)/2:])
    elif ord(char) == ord(aStr[len(aStr)/2]):
        return True
#q9
def semordnilap(str1, str2):
    '''
    str1: a string
    str2: a string
    
    returns: True if str1 and str2 are semordnilap;
             False otherwise.
    '''
    # Your code here
    if len(str1) != len(str2):
        return False
    elif len(str1)==0:
        return True
    elif str1[0] == str2[-1]:
        str1 = str1[1:]
        str2 = str2[:-1]
        return semordnilap(str1,str2)
    elif str1[0] != str2[-1]:
        return False
